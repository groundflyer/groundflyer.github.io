<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Roman Saldygashev's homepage</title><link href="https://groundflyer.github.io/" rel="alternate"></link><link href="https://groundflyer.github.io/feeds/houdini.atom.xml" rel="self"></link><id>https://groundflyer.github.io/</id><updated>2016-12-01T00:00:00+05:00</updated><entry><title>Point-based rippleÂ shader</title><link href="https://groundflyer.github.io/point-based-ripple.html" rel="alternate"></link><updated>2016-12-01T00:00:00+05:00</updated><author><name>Roman Saldygashev</name></author><id>tag:groundflyer.github.io,2016-10-24:point-based-ripple.html</id><summary type="html">&lt;img alt="" class="align-center" src="images/pb-ripple.jpg" style="width: 800px; height: 450px;" /&gt;
&lt;div class="section" id="generating-drops-point-cloud"&gt;
&lt;h2&gt;Generating drops&amp;nbsp;point-cloud&lt;/h2&gt;
&lt;p&gt;Exemplary &lt;span class="caps"&gt;POP&lt;/span&gt;&amp;nbsp;setup:&lt;/p&gt;
&lt;img alt="" class="align-center" src="images/pb-ripple-dop.png" /&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;sky_source&lt;/tt&gt; emits &lt;em&gt;rain&lt;/em&gt; particles.
Hitting the water surface each &lt;em&gt;rain&lt;/em&gt; particle emits one &lt;em&gt;drop&lt;/em&gt; particle via &lt;span class="caps"&gt;POP&lt;/span&gt; Replicate.
These &lt;em&gt;drop&lt;/em&gt; particles we&amp;#8217;ll use in the shader as a point cloud to generate&amp;nbsp;ripples.&lt;/p&gt;
&lt;p&gt;As we need hit info, the parameter &lt;strong&gt;Add Hit Attributes&lt;/strong&gt; must be enabled in &lt;span class="caps"&gt;POP&lt;/span&gt;&amp;nbsp;Solver.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Drops&lt;/em&gt; should stay steady exactly at the hit positions:
&lt;strong&gt;Shape&lt;/strong&gt; parameter on &lt;span class="caps"&gt;POP&lt;/span&gt; Replicate should be set to &lt;strong&gt;Point&lt;/strong&gt; and there are must be no forces affecting &lt;em&gt;drops&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Tip:
Keep &lt;strong&gt;Life Expectancy&lt;/strong&gt; as low as possible (1-2 seconds): it reduces point cloud size and improves render&amp;nbsp;performance.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;justborn&lt;/tt&gt; group we can use to emit spray particles, we don&amp;#8217;t need it for ripple&amp;nbsp;generation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-shader"&gt;
&lt;h2&gt;The&amp;nbsp;shader&lt;/h2&gt;
&lt;p&gt;I define the shape of wave using Gaussian&amp;nbsp;distribution:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
f(x) = e^{\frac{-x^2}{\sigma^2}}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;, where &lt;span class="math"&gt;\(x\)&lt;/span&gt; is wave position, &lt;span class="math"&gt;\(\sigma\)&lt;/span&gt; is wave&amp;nbsp;width.&lt;/p&gt;
&lt;object class="align-center" data="images/gauss.svg" type="image/svg+xml"&gt;
&lt;/object&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nf"&gt;gauss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;sigma&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sigma&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sigma&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Iterating over &lt;em&gt;drops&lt;/em&gt; particles stored in &lt;tt class="docutils literal"&gt;dropsfile&lt;/tt&gt;, we compute wave position using time &lt;tt class="docutils literal"&gt;age&lt;/tt&gt; and speed &lt;tt class="docutils literal"&gt;vel&lt;/tt&gt;.
Then we pass &lt;tt class="docutils literal"&gt;x&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;width&lt;/tt&gt; to gauss() function computing the wave&amp;nbsp;intensity.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;ripples&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
           &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;faloff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
           &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;dropsfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;handle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pcopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dropsfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;P&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;eval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

     &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pciterate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;rval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pcimport&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;point.distance&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
         &lt;span class="n"&gt;rval&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;=&lt;/span&gt; &lt;span class="n"&gt;pcimport&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;
                 &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;vel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                 &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;wave&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gauss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                 &lt;span class="n"&gt;wave&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;faloff&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                 &lt;span class="n"&gt;eval&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;wave&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
             &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;

     &lt;span class="n"&gt;pcclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

     &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are few naive ways to combine waves, but they have&amp;nbsp;defects:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;multiplication: zero result&amp;nbsp;always&lt;/li&gt;
&lt;li&gt;summation: rapid increasing of height on wave&amp;nbsp;crossings&lt;/li&gt;
&lt;li&gt;maximum: hard creases of crossing&amp;nbsp;waves&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So I use inverted multiplication of inverted waves. It produces much reliable&amp;nbsp;results.&lt;/p&gt;
&lt;p&gt;I square intensity at the end to soften&amp;nbsp;waves.&lt;/p&gt;
&lt;p&gt;Adjusting the &lt;tt class="docutils literal"&gt;radius&lt;/tt&gt; parameter can help to improve shader&amp;nbsp;performance.&lt;/p&gt;
&lt;p&gt;Wrap the code above to &lt;span class="caps"&gt;VEX&lt;/span&gt; Builder Operator Type and&amp;nbsp;enjoy.&lt;/p&gt;
&lt;div class="vimeo" align="center"&gt;&lt;iframe width="800" height="450" src="https://player.vimeo.com/video/187616133" frameborder="0"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="section" id="further-improvements"&gt;
&lt;h2&gt;Further&amp;nbsp;improvements&lt;/h2&gt;
&lt;p&gt;The shader can be improved next&amp;nbsp;ways:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I use inverse square attenuation,
but as far as the value of Life Expectancy is known,
it&amp;#8217;s possible to compute accurate arbitrary attenuation using&amp;nbsp;Ramp.&lt;/li&gt;
&lt;li&gt;Lookup radius also can be calculated accurately using velocity and Life Expectancy values instead of empirical&amp;nbsp;fitting.&lt;/li&gt;
&lt;li&gt;Waves combination should be done simulating interference. Probably it requires complex numbers&amp;nbsp;support.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="mantra"></category><category term="vex"></category></entry><entry><title>Point-based GI inÂ Mantra</title><link href="https://groundflyer.github.io/point-based-gi.html" rel="alternate"></link><updated>2016-10-23T00:00:00+05:00</updated><author><name>Roman Saldygashev</name></author><id>tag:groundflyer.github.io,2016-10-23:point-based-gi.html</id><summary type="html">&lt;img alt="" class="align-center" src="images/pbgi.jpg" style="width: 800px; height: 450px;" /&gt;
&lt;p&gt;This technique seems very similar to the former Renderman &lt;span class="caps"&gt;GI&lt;/span&gt; pipeline &lt;a href='#Christensen10' id='ref-Christensen10-1'&gt;Christensen (2010)&lt;/a&gt;, but here we use point clouds only for irradiance&amp;nbsp;caching.&lt;/p&gt;
&lt;div class="section" id="light-shader"&gt;
&lt;h2&gt;Light&amp;nbsp;shader&lt;/h2&gt;
&lt;p&gt;The shader is based on two&amp;nbsp;passes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;bake pass:&lt;ol class="arabic"&gt;
&lt;li&gt;compute&amp;nbsp;irradiance&lt;/li&gt;
&lt;li&gt;write the computed&amp;nbsp;value&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;beauty pass:&lt;ol class="arabic"&gt;
&lt;li&gt;read a few closest&amp;nbsp;points&lt;/li&gt;
&lt;li&gt;filter its&amp;nbsp;values&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Light shader&amp;nbsp;creation&lt;/dt&gt;
&lt;dd&gt;In main menu click File -&amp;gt; New Operator Type&amp;#8230;
Choose &lt;strong&gt;Operator Style&lt;/strong&gt; - &lt;strong&gt;&lt;span class="caps"&gt;VEX&lt;/span&gt; Type&lt;/strong&gt;, &lt;strong&gt;Network Type&lt;/strong&gt; - &lt;strong&gt;Light Shader Operator&lt;/strong&gt;,
set name and label. Now in Type Properties window in tab &lt;tt class="docutils literal"&gt;Code&lt;/tt&gt; we can wire code in &lt;a class="reference external" href="http://www.sidefx.com/docs/houdini15.5/vex/contexts/light"&gt;&lt;span class="caps"&gt;VEX&lt;/span&gt; light context&lt;/a&gt;.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;The global illumination computed with &lt;a class="reference external" href="http://www.sidefx.com/docs/houdini15.5/vex/functions/irradiance"&gt;irradiance()&lt;/a&gt; function and cached into a point cloud file using &lt;a class="reference external" href="http://www.sidefx.com/docs/houdini15.5/vex/functions/pcwrite"&gt;pcwrite()&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="lineno"&gt; 1 &lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="lineno"&gt; 2 &lt;/span&gt;
&lt;span class="lineno"&gt; 3 &lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt; &lt;span class="n"&gt;Cd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;irradiance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="lineno"&gt; 4 &lt;/span&gt;             &lt;span class="s"&gt;&amp;quot;samples&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;samples&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="lineno"&gt; 5 &lt;/span&gt;             &lt;span class="s"&gt;&amp;quot;environment&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;envmap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="lineno"&gt; 6 &lt;/span&gt;             &lt;span class="s"&gt;&amp;quot;envlight&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;space&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="lineno"&gt; 7 &lt;/span&gt;
&lt;span class="lineno"&gt; 8 &lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt; &lt;span class="n"&gt;wP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ptransform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;space:world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Ps&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="lineno"&gt; 9 &lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt; &lt;span class="n"&gt;wN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ntransform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;space:world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="lineno"&gt;10 &lt;/span&gt;
&lt;span class="lineno"&gt;11 &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getraylevel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;getglobalraylevel&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;span class="lineno"&gt;12 &lt;/span&gt;     &lt;span class="n"&gt;pcwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pcfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;P&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;N&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Cd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Cd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Point position and normal should be transformed into the world space. It&amp;#8217;s obligatory, exception only if you use the same camera for both bake and beauty&amp;nbsp;pass.&lt;/p&gt;
&lt;p&gt;To avoid stray calls of &lt;a class="reference external" href="http://www.sidefx.com/docs/houdini15.5/vex/functions/pcwrite"&gt;pcwrite()&lt;/a&gt; we assure that the current shading point is on zero&amp;nbsp;level.&lt;/p&gt;
&lt;p&gt;Reading and filtering&amp;nbsp;block:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;handle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pcopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pcfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;P&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maxpoints&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;preload&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Cl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pcfilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Cd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;pcclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;maxpoints&lt;/tt&gt; value is a sample count for&amp;nbsp;filtering.&lt;/p&gt;
&lt;p&gt;Final&amp;nbsp;code:&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/5be8cf68d58838f7b9ce91164c7d41c4.js'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;#pragma opname              "pbgilight"
#pragma oplabel             "Point Based GI"

#pragma hint __nonspecular hidden


#pragma label enable        "Enable"
#pragma label envmap        "Environment Map"
#pragma label samples       "Sampling Quality"
#pragma label adapt         "Adaptive Sampling"
#pragma label maxdist       "Max Ray Distance"
#pragma label scope         "Scope"
#pragma label categories    "Categories"
#pragma label tint          "Tint"


#pragma hint envmap         image
#pragma hint adapt          toggle
#pragma hint scope          oplist
#pragma hint enable         toggle
#pragma hint tint           color

#pragma range samples       0 64
#pragma range maxdist       -1 20

#pragma disablewhen tint        { enable == 0 }
#pragma disablewhen envmap      { enable == 0 }
#pragma disablewhen samples     { enable == 0 }
#pragma disablewhen maxdist     { enable == 0 }
#pragma disablewhen adapt       { enable == 0 }
#pragma disablewhen scope       { enable == 0 }

#pragma group Lighting enable adapt \
            tint envmap samples maxdist scope categories

#pragma label   pcfile      "Point Cloud File"
#pragma hint    pcfile      geometry
#pragma disablewhen pcfile  { pcbased == 0 }

#pragma label   mode        "Mode"
#pragma choice  mode        0 "Read"
#pragma choice  mode        1 "Write"
#pragma disablewhen mode    { pcbased == 0 }

#pragma label   radius      "Lookup Radius"
#pragma disablewhen radius  { pcbased == 0 } { mode == 1 }

#pragma label   maxpoints   "Maximum Points"
#pragma disablewhen maxpoints { pcbased == 0 } { mode == 1 }

#pragma group "Point Cache" pcfile mode radius maxpoints


light
phyLightIndirect(int enable = 1;
                 vector tint = {1., 1., 1.};
                 string envmap = "DOSCH_SKIESV2_01SN_lowres.rat";
                 int samples = 128;
                 int adapt = 1;
                 float maxdist = -1.;
                 string scope = "scope:default";
                 string categories = "*";
                 string pcfile = "$HIP/ind$F.pc";
                 int mode = 0;
                 float radius = 1;
                 int maxpoints = 32;
                 export int __nonspecular=1)
{
    if (enable)
        {
            vector n = normalize(N);
            vector wP = ptransform("space:world", Ps);
            vector wN = ntransform("space:world", n);
            vector eval = .0;
    
            int depth = getraylevel() + getglobalraylevel();

                if (mode)               // mode 1 == write
                    {
                        if (!depth)
                            {
                                vector Cd = irradiance(Ps, n,
                                                       "maxdist", maxdist,
                                                       "samples", samples,
                                                       "categories", categories,
                                                       "scope", scope,
                                                       "environment", envmap,
                                                       "envlight", getlightname(),
                                                       "adaptive", adapt);

                                pcwrite(pcfile, "P", wP, "N", wN, "Cd", Cd);
                            }
                    }
                else            // mode 0 == read
                    {
                        int handle = pcopen(pcfile, "P", wP, radius, maxpoints, "preload", 1);
                        eval = pcfilter(handle, "Cd");
                        pcclose(handle);
                    }

            Cl = tint * eval;
            L = n;
        }
    else
        Cl = 0;
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="scene-setup"&gt;
&lt;h2&gt;Scene&amp;nbsp;setup&lt;/h2&gt;
&lt;p&gt;Create Template Light and set parameter Light Shader to our light shader &lt;span class="caps"&gt;SHOP&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Create two Mantra ROPs: one for bake pass, second for beauty&amp;nbsp;pass.&lt;/p&gt;
&lt;p&gt;For bake pass create a new Take and add the &lt;strong&gt;Mode&lt;/strong&gt; parameter on the light shader to the take, setting value to &lt;strong&gt;Write&lt;/strong&gt; accordingly.
Then specify this take in the bake &lt;span class="caps"&gt;ROP&lt;/span&gt;.
Use only Micropoly render engine for baking: it generates regular point cloud grid.
Output Image is useless, so you can set it to &lt;tt class="docutils literal"&gt;/dev/null&lt;/tt&gt; - on Linux, or &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;NUL&lt;/span&gt;&lt;/tt&gt; on&amp;nbsp;Windows.&lt;/p&gt;
&lt;p&gt;Beauty pass should work fine with any render&amp;nbsp;engine.&lt;/p&gt;
&lt;p&gt;The saved point cloud is available through File &lt;span class="caps"&gt;SOP&lt;/span&gt;.&lt;/p&gt;
&lt;div class="vimeo" align="center"&gt;&lt;iframe width="800" height="450" src="https://player.vimeo.com/video/187550386" frameborder="0"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="section" id="optimization"&gt;
&lt;h2&gt;Optimization&lt;/h2&gt;
&lt;p&gt;Usually I disable hiding on the bake &lt;span class="caps"&gt;ROP&lt;/span&gt;. Resulting point clouds with Uniform Geometry Measuring are more regular. To increase/decrease point cloud density change Shading Quality Multiplier on the &lt;span class="caps"&gt;ROP&lt;/span&gt; or on&amp;nbsp;objects.&lt;/p&gt;
&lt;p&gt;To get deeper diffuse bounces shader must be more complicated. &lt;a class="reference external" href="http://www.sidefx.com/docs/houdini15.5/vex/functions/getglobalraylevel"&gt;getglobalraylevel()&lt;/a&gt; and &lt;a class="reference external" href="http://www.sidefx.com/docs/houdini15.5/vex/functions/renderstate"&gt;renderstate()&lt;/a&gt; functions should useful tom implement this&amp;nbsp;feature.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="http://www.sidefx.com/docs/houdini15.5/vex/functions/pcfilter"&gt;pcfilter()&lt;/a&gt; function implements weighted arithmetic mean with weights based on distance to a point. I prefer a custom filter routine which takes point normal into&amp;nbsp;account:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
C = \frac{\sum_{i=0}^N C_i}{\sum_{i=0}^N \left(\frac{\cos \theta_i}{r_i}\right)^2}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(C\)&lt;/span&gt; - resulted value, &lt;span class="math"&gt;\(N\)&lt;/span&gt; - number of points, &lt;span class="math"&gt;\(C_i\)&lt;/span&gt; -  color value of &lt;span class="math"&gt;\(i\)&lt;/span&gt;theta_i` - angle between shading point and &lt;span class="math"&gt;\(i\)&lt;/span&gt; - distance to the&amp;nbsp;point.&lt;/p&gt;
&lt;p&gt;It is possible to do all the calculations in a single pass only.
To implement this you need to generate point cloud at rendertime using &lt;a class="reference external" href="http://www.sidefx.com/docs/houdini15.5/vex/functions/pcgenerate"&gt;pcgenerate()&lt;/a&gt;, then iterate over points with &lt;a class="reference external" href="http://www.sidefx.com/docs/houdini15.5/vex/functions/pcunshaded"&gt;pcunshaded()&lt;/a&gt; setting up position and normal using &lt;a class="reference external" href="http://www.sidefx.com/docs/houdini15.5/vex/functions/sample_geometry"&gt;sample_geometry()&lt;/a&gt; and finally compute irradiance.
The filter step remains unchanged.
This light however will always produce flicker&amp;nbsp;artifacts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="method-cons"&gt;
&lt;h2&gt;Method&amp;nbsp;cons&lt;/h2&gt;
&lt;p&gt;Comparing to modern path tracing this method is a&amp;nbsp;vintage:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;inflexibility&lt;/li&gt;
&lt;li&gt;two&amp;nbsp;passes&lt;/li&gt;
&lt;li&gt;wasting io&amp;nbsp;operations&lt;/li&gt;
&lt;li&gt;potential&amp;nbsp;flickering&lt;/li&gt;
&lt;li&gt;only diffuse&amp;nbsp;bounces&lt;/li&gt;
&lt;li&gt;ignoring &lt;span class="caps"&gt;BSDF&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;complicated scene&amp;nbsp;setup&lt;/li&gt;
&lt;li&gt;one value per point: two-sided materials are not&amp;nbsp;supported&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%&amp;#64;#$&amp;#64;#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%&amp;#64;#$&amp;#64;#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;&lt;hr&gt;
&lt;h2&gt;Bibliography&lt;/h2&gt;
&lt;p id='Christensen10'&gt;Per Christensen.
Point-based global illumination for movie production.
&lt;em&gt;ACM Trans. Graph.&lt;/em&gt;, 7 2010.
URL: &lt;a href="http://graphics.pixar.com/library/PointBasedGlobalIlluminationForMovieProduction/"&gt;http://graphics.pixar.com/library/PointBasedGlobalIlluminationForMovieProduction/&lt;/a&gt;. &lt;a class="cite-backref" href="#ref-Christensen10-1" title="Jump back to reference 1"&gt;â©&lt;/a&gt;&lt;/p&gt;
</summary><category term="mantra"></category><category term="vex"></category></entry></feed>